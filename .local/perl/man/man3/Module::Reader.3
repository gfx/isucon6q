.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Module::Reader 3"
.TH Module::Reader 3 "2014-08-21" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Reader \- Read the source of a module like perl does
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Module::Reader qw(:all);
\&    my $io = module_handle(\*(AqMy::Module\*(Aq);
\&    my $content = module_content(\*(AqMy::Module\*(Aq);
\&    
\&    my $io = module_handle(\*(AqMy::Module\*(Aq, @search_dirs);
\&    
\&    my $io = module_handle(\*(AqMy::Module\*(Aq, @search_dirs, { found => \e%INC });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Reads the content of perl modules the same way perl does.  This
includes reading modules available only by \f(CW@INC\fR hooks, or filtered
through them.
.SH "EXPORTS"
.IX Header "EXPORTS"
.ie n .SS "module_handle( $module_name, @search_dirs, \e%options )"
.el .SS "module_handle( \f(CW$module_name\fP, \f(CW@search_dirs\fP, \e%options )"
.IX Subsection "module_handle( $module_name, @search_dirs, %options )"
Returns an \s-1IO\s0 handle to the given module.  Searches the directories
specified, or \f(CW@INC\fR if none are.
.PP
\fIOptions\fR
.IX Subsection "Options"
.IP "found" 4
.IX Item "found"
A reference to a hash like \f(CW%INC\fR with module file names (in the
style '\fIMy/Module.pm\fR') as keys and full file paths as values.
Modules listed in this will be used in preference to searching
through directories.
.ie n .SS "module_content( $module_name, @search_dirs, \e%options )"
.el .SS "module_content( \f(CW$module_name\fP, \f(CW@search_dirs\fP, \e%options )"
.IX Subsection "module_content( $module_name, @search_dirs, %options )"
Returns the content of the given module.  Accepts the same options as \f(CW\*(C`module_handle\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
haarg \- Graham Knop (cpan:HAARG) <haarg@haarg.org>
.SS "\s-1CONTRIBUTORS\s0"
.IX Subsection "CONTRIBUTORS"
None yet.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2013 the Module::Reader \*(L"\s-1AUTHOR\*(R"\s0 and \*(L"\s-1CONTRIBUTORS\*(R"\s0
as listed above.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software and may be distributed under the same terms
as perl itself.
